void PLL_Init(void){
  // 0) Use RCC2 because it provides more options
  SYSCTL_RCC2_R |=  0x80000000;                // USERCC2
  
  // 1) bypass PLL (bit 11) while initializing. PLL is bypassed and there is no system clock divider
  SYSCTL_RCC2_R |=  0x00000800;                // BYPASS2, PLL bypass
  
  // 2) select the crystal value and oscillator source. Specify crystal frequency and the four XTAL bits.
  //    The OSCSRC2 bits are cleared to select the main oscillator as the oscillator clock source
  SYSCTL_RCC_R = (SYSCTL_RCC_R &~0x000007C0)   // clear XTAL field, bits 10-6
                 + 0x00000540;                 // 10101, configure for 16 MHz crystal bit 6-10
  SYSCTL_RCC2_R &= ~0x00000070;                // configure for main oscillator source
  
  // 3) activate PLL by clearing PWRDN. clear PWRDN2 (bit 13) to activate the PLL.
  SYSCTL_RCC2_R &= ~0x00002000;
  
  // 4) set the desired system divider. configure and enable the clock divider using the 7-bit SYSDIV2 field.
  //    If the 7-bit SYSDIV2 is n, then the clock will be divided by n+1.To get the desired 80 MHz from the 
  //    400 MHz PLL, we need to divide by 5. So, we place a 4 into the SYSDIV2 field.
  SYSCTL_RCC2_R |= 0x40000000;                  // use 400 MHz PLL
  SYSCTL_RCC2_R = (SYSCTL_RCC2_R&~ 0x1FC00000)  // clear system clock divider
                  + (4<<22);                    // configure for 80 MHz clock
  
  // 5) wait for the PLL to lock by polling PLLLRIS. wait for the PLL to stabilize by waiting for PLLRIS (bit 6) 
  //    in the SYSCTL_RIS_R to become high.
  while((SYSCTL_RIS_R&0x00000040)==0){};        // wait for PLLRIS bit
  
  // 6) enable use of PLL by clearing BYPASS. connect/enable the PLL by clearing the BYPASS2 bit. To modify this 
  //    program to operate on other microcontrollers, you will need to change the crystal frequency and the system clock divider.
  SYSCTL_RCC2_R &= ~0x00000800;
}
